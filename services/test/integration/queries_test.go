// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package integration_test

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/playmint/ds-node/pkg/api/model"
)

type ActionTransactionStatus string

const (
	ActionTransactionStatusUnknown ActionTransactionStatus = "UNKNOWN"
	ActionTransactionStatusPending ActionTransactionStatus = "PENDING"
	ActionTransactionStatusSuccess ActionTransactionStatus = "SUCCESS"
	ActionTransactionStatusFailed  ActionTransactionStatus = "FAILED"
)

// __dispatchInput is used internally by genqlient
type __dispatchInput struct {
	GameID  string   `json:"gameID"`
	Actions []string `json:"actions"`
	Auth    string   `json:"auth"`
}

// GetGameID returns __dispatchInput.GameID, and is useful for accessing the field via an interface.
func (v *__dispatchInput) GetGameID() string { return v.GameID }

// GetActions returns __dispatchInput.Actions, and is useful for accessing the field via an interface.
func (v *__dispatchInput) GetActions() []string { return v.Actions }

// GetAuth returns __dispatchInput.Auth, and is useful for accessing the field via an interface.
func (v *__dispatchInput) GetAuth() string { return v.Auth }

// __getGameInput is used internally by genqlient
type __getGameInput struct {
	GameID string `json:"gameID"`
}

// GetGameID returns __getGameInput.GameID, and is useful for accessing the field via an interface.
func (v *__getGameInput) GetGameID() string { return v.GameID }

// __getSeekersInput is used internally by genqlient
type __getSeekersInput struct {
	GameID string `json:"gameID"`
}

// GetGameID returns __getSeekersInput.GameID, and is useful for accessing the field via an interface.
func (v *__getSeekersInput) GetGameID() string { return v.GameID }

// __getSessionByIDInput is used internally by genqlient
type __getSessionByIDInput struct {
	GameID  string `json:"gameID"`
	Session string `json:"session"`
}

// GetGameID returns __getSessionByIDInput.GameID, and is useful for accessing the field via an interface.
func (v *__getSessionByIDInput) GetGameID() string { return v.GameID }

// GetSession returns __getSessionByIDInput.Session, and is useful for accessing the field via an interface.
func (v *__getSessionByIDInput) GetSession() string { return v.Session }

// __getSessionsByOwnerInput is used internally by genqlient
type __getSessionsByOwnerInput struct {
	GameID string `json:"gameID"`
	Owner  string `json:"owner"`
}

// GetGameID returns __getSessionsByOwnerInput.GameID, and is useful for accessing the field via an interface.
func (v *__getSessionsByOwnerInput) GetGameID() string { return v.GameID }

// GetOwner returns __getSessionsByOwnerInput.Owner, and is useful for accessing the field via an interface.
func (v *__getSessionsByOwnerInput) GetOwner() string { return v.Owner }

// __getTransactionByIDInput is used internally by genqlient
type __getTransactionByIDInput struct {
	GameID string `json:"gameID"`
	Id     string `json:"id"`
}

// GetGameID returns __getTransactionByIDInput.GameID, and is useful for accessing the field via an interface.
func (v *__getTransactionByIDInput) GetGameID() string { return v.GameID }

// GetId returns __getTransactionByIDInput.Id, and is useful for accessing the field via an interface.
func (v *__getTransactionByIDInput) GetId() string { return v.Id }

// __signinInput is used internally by genqlient
type __signinInput struct {
	GameID  string `json:"gameID"`
	Session string `json:"session"`
	Auth    string `json:"auth"`
}

// GetGameID returns __signinInput.GameID, and is useful for accessing the field via an interface.
func (v *__signinInput) GetGameID() string { return v.GameID }

// GetSession returns __signinInput.Session, and is useful for accessing the field via an interface.
func (v *__signinInput) GetSession() string { return v.Session }

// GetAuth returns __signinInput.Auth, and is useful for accessing the field via an interface.
func (v *__signinInput) GetAuth() string { return v.Auth }

// __signoutInput is used internally by genqlient
type __signoutInput struct {
	GameID  string `json:"gameID"`
	Session string `json:"session"`
	Auth    string `json:"auth"`
}

// GetGameID returns __signoutInput.GameID, and is useful for accessing the field via an interface.
func (v *__signoutInput) GetGameID() string { return v.GameID }

// GetSession returns __signoutInput.Session, and is useful for accessing the field via an interface.
func (v *__signoutInput) GetSession() string { return v.Session }

// GetAuth returns __signoutInput.Auth, and is useful for accessing the field via an interface.
func (v *__signoutInput) GetAuth() string { return v.Auth }

// dispatchDispatchActionTransaction includes the requested fields of the GraphQL type ActionTransaction.
type dispatchDispatchActionTransaction struct {
	Id     string                  `json:"id"`
	Status ActionTransactionStatus `json:"status"`
}

// GetId returns dispatchDispatchActionTransaction.Id, and is useful for accessing the field via an interface.
func (v *dispatchDispatchActionTransaction) GetId() string { return v.Id }

// GetStatus returns dispatchDispatchActionTransaction.Status, and is useful for accessing the field via an interface.
func (v *dispatchDispatchActionTransaction) GetStatus() ActionTransactionStatus { return v.Status }

// dispatchResponse is returned by dispatch on success.
type dispatchResponse struct {
	Dispatch dispatchDispatchActionTransaction `json:"dispatch"`
}

// GetDispatch returns dispatchResponse.Dispatch, and is useful for accessing the field via an interface.
func (v *dispatchResponse) GetDispatch() dispatchDispatchActionTransaction { return v.Dispatch }

// getGameGame includes the requested fields of the GraphQL type Game.
type getGameGame struct {
	Id string `json:"id"`
}

// GetId returns getGameGame.Id, and is useful for accessing the field via an interface.
func (v *getGameGame) GetId() string { return v.Id }

// getGameResponse is returned by getGame on success.
type getGameResponse struct {
	Game getGameGame `json:"game"`
}

// GetGame returns getGameResponse.Game, and is useful for accessing the field via an interface.
func (v *getGameResponse) GetGame() getGameGame { return v.Game }

// getSeekersGame includes the requested fields of the GraphQL type Game.
type getSeekersGame struct {
	State getSeekersGameState `json:"state"`
}

// GetState returns getSeekersGame.State, and is useful for accessing the field via an interface.
func (v *getSeekersGame) GetState() getSeekersGameState { return v.State }

// getSeekersGameState includes the requested fields of the GraphQL type State.
type getSeekersGameState struct {
	// nodes returns any nodes that match the Match filter.
	Seekers []getSeekersGameStateSeekersNode `json:"seekers"`
}

// GetSeekers returns getSeekersGameState.Seekers, and is useful for accessing the field via an interface.
func (v *getSeekersGameState) GetSeekers() []getSeekersGameStateSeekersNode { return v.Seekers }

// getSeekersGameStateSeekersNode includes the requested fields of the GraphQL type Node.
type getSeekersGameStateSeekersNode struct {
	// the full globally unique id of the node. see `splitID` for extracting
	// useful parts from the id.
	Id string `json:"id"`
	// nodes have a "kind" label, it is the human friendly decoding of the first 4
	// bytes of the id. See `id` and `keys`. This value is discovered based on the
	// value set on the state contract via registerNodeType.
	Kind string `json:"kind"`
	// same as `nodes`, but only returns the first match
	Position getSeekersGameStateSeekersNodePositionNode `json:"position"`
}

// GetId returns getSeekersGameStateSeekersNode.Id, and is useful for accessing the field via an interface.
func (v *getSeekersGameStateSeekersNode) GetId() string { return v.Id }

// GetKind returns getSeekersGameStateSeekersNode.Kind, and is useful for accessing the field via an interface.
func (v *getSeekersGameStateSeekersNode) GetKind() string { return v.Kind }

// GetPosition returns getSeekersGameStateSeekersNode.Position, and is useful for accessing the field via an interface.
func (v *getSeekersGameStateSeekersNode) GetPosition() getSeekersGameStateSeekersNodePositionNode {
	return v.Position
}

// getSeekersGameStateSeekersNodePositionNode includes the requested fields of the GraphQL type Node.
type getSeekersGameStateSeekersNodePositionNode struct {
	// the full id is made up of 4 bytes of "kind" + 8 bytes of user defined keys.
	// sometimes useful data is stored in the last 8 bytes, like maybe a smaller
	// identifier, or a timestamp, or multiple sub keys. keys extracts these little
	// subkeys from the big id. How many keys are extracted is ditacted by the
	// CompoundKeyKind value set on the state contract during registerNodeType
	Keys []model.BigInt `json:"-"`
}

// GetKeys returns getSeekersGameStateSeekersNodePositionNode.Keys, and is useful for accessing the field via an interface.
func (v *getSeekersGameStateSeekersNodePositionNode) GetKeys() []model.BigInt { return v.Keys }

func (v *getSeekersGameStateSeekersNodePositionNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getSeekersGameStateSeekersNodePositionNode
		Keys []json.RawMessage `json:"keys"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getSeekersGameStateSeekersNodePositionNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Keys
		src := firstPass.Keys
		*dst = make(
			[]model.BigInt,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = model.ClientUnmarshalBigInt(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"Unable to unmarshal getSeekersGameStateSeekersNodePositionNode.Keys: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalgetSeekersGameStateSeekersNodePositionNode struct {
	Keys []json.RawMessage `json:"keys"`
}

func (v *getSeekersGameStateSeekersNodePositionNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getSeekersGameStateSeekersNodePositionNode) __premarshalJSON() (*__premarshalgetSeekersGameStateSeekersNodePositionNode, error) {
	var retval __premarshalgetSeekersGameStateSeekersNodePositionNode

	{

		dst := &retval.Keys
		src := v.Keys
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = model.ClientMarshalBigInt(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal getSeekersGameStateSeekersNodePositionNode.Keys: %w", err)
			}
		}
	}
	return &retval, nil
}

// getSeekersResponse is returned by getSeekers on success.
type getSeekersResponse struct {
	Game getSeekersGame `json:"game"`
}

// GetGame returns getSeekersResponse.Game, and is useful for accessing the field via an interface.
func (v *getSeekersResponse) GetGame() getSeekersGame { return v.Game }

// getSessionByIDGame includes the requested fields of the GraphQL type Game.
type getSessionByIDGame struct {
	Router getSessionByIDGameRouter `json:"router"`
}

// GetRouter returns getSessionByIDGame.Router, and is useful for accessing the field via an interface.
func (v *getSessionByIDGame) GetRouter() getSessionByIDGameRouter { return v.Router }

// getSessionByIDGameRouter includes the requested fields of the GraphQL type Router.
type getSessionByIDGameRouter struct {
	Session getSessionByIDGameRouterSession `json:"session"`
}

// GetSession returns getSessionByIDGameRouter.Session, and is useful for accessing the field via an interface.
func (v *getSessionByIDGameRouter) GetSession() getSessionByIDGameRouterSession { return v.Session }

// getSessionByIDGameRouterSession includes the requested fields of the GraphQL type Session.
type getSessionByIDGameRouterSession struct {
	Owner   string `json:"owner"`
	Expires int    `json:"expires"`
}

// GetOwner returns getSessionByIDGameRouterSession.Owner, and is useful for accessing the field via an interface.
func (v *getSessionByIDGameRouterSession) GetOwner() string { return v.Owner }

// GetExpires returns getSessionByIDGameRouterSession.Expires, and is useful for accessing the field via an interface.
func (v *getSessionByIDGameRouterSession) GetExpires() int { return v.Expires }

// getSessionByIDResponse is returned by getSessionByID on success.
type getSessionByIDResponse struct {
	Game getSessionByIDGame `json:"game"`
}

// GetGame returns getSessionByIDResponse.Game, and is useful for accessing the field via an interface.
func (v *getSessionByIDResponse) GetGame() getSessionByIDGame { return v.Game }

// getSessionsByOwnerGame includes the requested fields of the GraphQL type Game.
type getSessionsByOwnerGame struct {
	Router getSessionsByOwnerGameRouter `json:"router"`
}

// GetRouter returns getSessionsByOwnerGame.Router, and is useful for accessing the field via an interface.
func (v *getSessionsByOwnerGame) GetRouter() getSessionsByOwnerGameRouter { return v.Router }

// getSessionsByOwnerGameRouter includes the requested fields of the GraphQL type Router.
type getSessionsByOwnerGameRouter struct {
	Sessions []getSessionsByOwnerGameRouterSessionsSession `json:"sessions"`
}

// GetSessions returns getSessionsByOwnerGameRouter.Sessions, and is useful for accessing the field via an interface.
func (v *getSessionsByOwnerGameRouter) GetSessions() []getSessionsByOwnerGameRouterSessionsSession {
	return v.Sessions
}

// getSessionsByOwnerGameRouterSessionsSession includes the requested fields of the GraphQL type Session.
type getSessionsByOwnerGameRouterSessionsSession struct {
	Id string `json:"id"`
}

// GetId returns getSessionsByOwnerGameRouterSessionsSession.Id, and is useful for accessing the field via an interface.
func (v *getSessionsByOwnerGameRouterSessionsSession) GetId() string { return v.Id }

// getSessionsByOwnerResponse is returned by getSessionsByOwner on success.
type getSessionsByOwnerResponse struct {
	Game getSessionsByOwnerGame `json:"game"`
}

// GetGame returns getSessionsByOwnerResponse.Game, and is useful for accessing the field via an interface.
func (v *getSessionsByOwnerResponse) GetGame() getSessionsByOwnerGame { return v.Game }

// getTransactionByIDGame includes the requested fields of the GraphQL type Game.
type getTransactionByIDGame struct {
	Router getTransactionByIDGameRouter `json:"router"`
}

// GetRouter returns getTransactionByIDGame.Router, and is useful for accessing the field via an interface.
func (v *getTransactionByIDGame) GetRouter() getTransactionByIDGameRouter { return v.Router }

// getTransactionByIDGameRouter includes the requested fields of the GraphQL type Router.
type getTransactionByIDGameRouter struct {
	Transaction getTransactionByIDGameRouterTransactionActionTransaction `json:"transaction"`
}

// GetTransaction returns getTransactionByIDGameRouter.Transaction, and is useful for accessing the field via an interface.
func (v *getTransactionByIDGameRouter) GetTransaction() getTransactionByIDGameRouterTransactionActionTransaction {
	return v.Transaction
}

// getTransactionByIDGameRouterTransactionActionTransaction includes the requested fields of the GraphQL type ActionTransaction.
type getTransactionByIDGameRouterTransactionActionTransaction struct {
	Id     string                                                                   `json:"id"`
	Status ActionTransactionStatus                                                  `json:"status"`
	Batch  getTransactionByIDGameRouterTransactionActionTransactionBatchActionBatch `json:"batch"`
}

// GetId returns getTransactionByIDGameRouterTransactionActionTransaction.Id, and is useful for accessing the field via an interface.
func (v *getTransactionByIDGameRouterTransactionActionTransaction) GetId() string { return v.Id }

// GetStatus returns getTransactionByIDGameRouterTransactionActionTransaction.Status, and is useful for accessing the field via an interface.
func (v *getTransactionByIDGameRouterTransactionActionTransaction) GetStatus() ActionTransactionStatus {
	return v.Status
}

// GetBatch returns getTransactionByIDGameRouterTransactionActionTransaction.Batch, and is useful for accessing the field via an interface.
func (v *getTransactionByIDGameRouterTransactionActionTransaction) GetBatch() getTransactionByIDGameRouterTransactionActionTransactionBatchActionBatch {
	return v.Batch
}

// getTransactionByIDGameRouterTransactionActionTransactionBatchActionBatch includes the requested fields of the GraphQL type ActionBatch.
type getTransactionByIDGameRouterTransactionActionTransactionBatchActionBatch struct {
	Block int    `json:"block"`
	Tx    string `json:"tx"`
}

// GetBlock returns getTransactionByIDGameRouterTransactionActionTransactionBatchActionBatch.Block, and is useful for accessing the field via an interface.
func (v *getTransactionByIDGameRouterTransactionActionTransactionBatchActionBatch) GetBlock() int {
	return v.Block
}

// GetTx returns getTransactionByIDGameRouterTransactionActionTransactionBatchActionBatch.Tx, and is useful for accessing the field via an interface.
func (v *getTransactionByIDGameRouterTransactionActionTransactionBatchActionBatch) GetTx() string {
	return v.Tx
}

// getTransactionByIDResponse is returned by getTransactionByID on success.
type getTransactionByIDResponse struct {
	Game getTransactionByIDGame `json:"game"`
}

// GetGame returns getTransactionByIDResponse.Game, and is useful for accessing the field via an interface.
func (v *getTransactionByIDResponse) GetGame() getTransactionByIDGame { return v.Game }

// signinResponse is returned by signin on success.
type signinResponse struct {
	Signin bool `json:"signin"`
}

// GetSignin returns signinResponse.Signin, and is useful for accessing the field via an interface.
func (v *signinResponse) GetSignin() bool { return v.Signin }

// signoutResponse is returned by signout on success.
type signoutResponse struct {
	Signout bool `json:"signout"`
}

// GetSignout returns signoutResponse.Signout, and is useful for accessing the field via an interface.
func (v *signoutResponse) GetSignout() bool { return v.Signout }

func dispatch(
	ctx context.Context,
	client graphql.Client,
	gameID string,
	actions []string,
	auth string,
) (*dispatchResponse, error) {
	req := &graphql.Request{
		OpName: "dispatch",
		Query: `
mutation dispatch ($gameID: ID!, $actions: [String!]!, $auth: String!) {
	dispatch(gameID: $gameID, actions: $actions, authorization: $auth) {
		id
		status
	}
}
`,
		Variables: &__dispatchInput{
			GameID:  gameID,
			Actions: actions,
			Auth:    auth,
		},
	}
	var err error

	var data dispatchResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getGame(
	ctx context.Context,
	client graphql.Client,
	gameID string,
) (*getGameResponse, error) {
	req := &graphql.Request{
		OpName: "getGame",
		Query: `
query getGame ($gameID: ID!) {
	game(id: $gameID) {
		id
	}
}
`,
		Variables: &__getGameInput{
			GameID: gameID,
		},
	}
	var err error

	var data getGameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getSeekers(
	ctx context.Context,
	client graphql.Client,
	gameID string,
) (*getSeekersResponse, error) {
	req := &graphql.Request{
		OpName: "getSeekers",
		Query: `
query getSeekers ($gameID: ID!) {
	game(id: $gameID) {
		state {
			seekers: nodes(match: {kinds:["Seeker"]}) {
				id
				kind
				position: node(match: {via:[{rel:"Location"}],kinds:["Tile"]}) {
					keys
				}
			}
		}
	}
}
`,
		Variables: &__getSeekersInput{
			GameID: gameID,
		},
	}
	var err error

	var data getSeekersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getSessionByID(
	ctx context.Context,
	client graphql.Client,
	gameID string,
	session string,
) (*getSessionByIDResponse, error) {
	req := &graphql.Request{
		OpName: "getSessionByID",
		Query: `
query getSessionByID ($gameID: ID!, $session: ID!) {
	game(id: $gameID) {
		router {
			session(id: $session) {
				owner
				expires
			}
		}
	}
}
`,
		Variables: &__getSessionByIDInput{
			GameID:  gameID,
			Session: session,
		},
	}
	var err error

	var data getSessionByIDResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getSessionsByOwner(
	ctx context.Context,
	client graphql.Client,
	gameID string,
	owner string,
) (*getSessionsByOwnerResponse, error) {
	req := &graphql.Request{
		OpName: "getSessionsByOwner",
		Query: `
query getSessionsByOwner ($gameID: ID!, $owner: String!) {
	game(id: $gameID) {
		router {
			sessions(owner: $owner) {
				id
			}
		}
	}
}
`,
		Variables: &__getSessionsByOwnerInput{
			GameID: gameID,
			Owner:  owner,
		},
	}
	var err error

	var data getSessionsByOwnerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getTransactionByID(
	ctx context.Context,
	client graphql.Client,
	gameID string,
	id string,
) (*getTransactionByIDResponse, error) {
	req := &graphql.Request{
		OpName: "getTransactionByID",
		Query: `
query getTransactionByID ($gameID: ID!, $id: ID!) {
	game(id: $gameID) {
		router {
			transaction(id: $id) {
				id
				status
				batch {
					block
					tx
				}
			}
		}
	}
}
`,
		Variables: &__getTransactionByIDInput{
			GameID: gameID,
			Id:     id,
		},
	}
	var err error

	var data getTransactionByIDResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func signin(
	ctx context.Context,
	client graphql.Client,
	gameID string,
	session string,
	auth string,
) (*signinResponse, error) {
	req := &graphql.Request{
		OpName: "signin",
		Query: `
mutation signin ($gameID: ID!, $session: String!, $auth: String!) {
	signin(gameID: $gameID, session: $session, ttl: 1000, scope: "0xffffffff", authorization: $auth)
}
`,
		Variables: &__signinInput{
			GameID:  gameID,
			Session: session,
			Auth:    auth,
		},
	}
	var err error

	var data signinResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func signout(
	ctx context.Context,
	client graphql.Client,
	gameID string,
	session string,
	auth string,
) (*signoutResponse, error) {
	req := &graphql.Request{
		OpName: "signout",
		Query: `
mutation signout ($gameID: ID!, $session: String!, $auth: String!) {
	signout(gameID: $gameID, session: $session, authorization: $auth)
}
`,
		Variables: &__signoutInput{
			GameID:  gameID,
			Session: session,
			Auth:    auth,
		},
	}
	var err error

	var data signoutResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
